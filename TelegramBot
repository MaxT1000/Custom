//--------------------static-------------------

const token = "id_token";     
const telegramUrl = "https://api.telegram.org/bot" + token;
const webAppUrl = "https://script.google.com/macros/s/id/exec";; // 
const ssId = "idTable";      // –ù–∞—à–∞ —Ç–∞–±–ª–∏—Ü—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
const adminID = "admin_id";
const sheetQuestion = SpreadsheetApp.openById(ssId).getSheetByName("Question")
const sheetAnswers = SpreadsheetApp.openById(ssId).getSheetByName("Answers")
const sheetUserQuestions = SpreadsheetApp.openById(ssId).getSheetByName("UserQuestions")
const sheetArchive = SpreadsheetApp.openById(ssId).getSheetByName("Statistics")
const ssbase ="base_id"
const sheetbase = SpreadsheetApp.openById(ssbase).getSheetByName("archive")
const sheetHr = SpreadsheetApp.openById(ssbase).getSheetByName("Question")

//--------------------Webhook-------------------

function setWebhook() {
  try {
    var url = telegramUrl + "/setWebhook?url=" + webAppUrl;
    var response = UrlFetchApp.fetch(url); 
    var responseData = JSON.parse(response.getContentText());

    if (responseData.ok) {
      Logger.log('Webhook successfully set.');
    } else {
      Logger.log('Error setting webhook: ' + responseData.description);
    }
  } catch (e) {
    Logger.log('Exception setting webhook: ' + e);
  }
}
function getWebhookInfo() {
  var url = telegramUrl + "/getWebhookInfo";
  var response = UrlFetchApp.fetch(url);
  if( response.getResponseCode() == 200){
    var data = JSON.parse(response.getContentText())
    Logger.log("Currrent webhook url is " + data .result.url)
  }else{
    Logger.log("telegram response status is " + response.getResponseCode())
  }
  
}
//--------------------bot_send-------------------
const numbersQuetions = 7;

function doGet(e) {
  return HtmlService.createHtmlOutput("Hi there");
}


function doPost(e) {
  try {
    var data = JSON.parse(e.postData.contents);
    var text = data.message.text;
    var chatId = data.message.chat.id;
    var name = data.message.chat.first_name + " " + data.message.chat.last_name;

    if (text === '/start') {
      processCommand(text, chatId, name);
    } else {
      var currentQuestion = getCurrentQuestion(chatId);
      if (currentQuestion !== -1) {
        var questionText = getQuestionText(currentQuestion);
        sheetAnswers.appendRow([new Date(), chatId, name, questionText, text]);

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        setUserQuestion(chatId, currentQuestion + 1);

        if (currentQuestion + 1 <= numbersQuetions) {
          // –í–∏–≤–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
          var questionTextNext = getQuestionText(currentQuestion + 1);
          var options = getQuestionOptions(currentQuestion + 1);
          sendQuestionWithKeyboard(chatId, questionTextNext, options);
        } else {
          // –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
          sendText(chatId, "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
          setUserQuestion(chatId, -1);
        }
      } else {
        sendText(chatId, "–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
      }
    }
  } catch (e) {
    sendText(adminID, JSON.stringify(e, null, 4));
  }
}

function getCurrentQuestion(chatId) {
  var userRow = getUserRow(chatId);
  if (userRow !== -1) {
    return parseInt(sheetUserQuestions.getRange(userRow, 2).getValue());
  }
  return -1;
}

function setUserQuestion(chatId, questionNumber) {
  var userRow = getUserRow(chatId);

  if (userRow === -1) {
    sheetUserQuestions.appendRow([chatId, questionNumber]);
  } else {
    sheetUserQuestions.getRange(userRow, 2).setValue(questionNumber);
  }
}

function processCommand(text, chatId, name) {
  var currentQuestion = getCurrentQuestion(chatId);

  if (text === '/start' && currentQuestion === -1) {
    // –ü–æ—á–∞—Ç–æ–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    currentQuestion = 1;
    setUserQuestion(chatId, currentQuestion);
    var questionText = getQuestionText(currentQuestion);
    var options = getQuestionOptions(currentQuestion);
    sendQuestionWithKeyboard(chatId, questionText, options);
  } else if (currentQuestion !== -1) {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    var questionText = getQuestionText(currentQuestion);
    sheetAnswers.appendRow([new Date(), chatId, name, questionText, text]);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    setUserQuestion(chatId, currentQuestion + 1);

    if (currentQuestion + 1 <= numbersQuetions) {
      // –í–∏–≤–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
      var questionTextNext = getQuestionText(currentQuestion + 1);
      var options = getQuestionOptions(currentQuestion + 1);
      sendQuestionWithKeyboard(chatId, questionTextNext, options);
    } else {
      // –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
      sendText(chatId, "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
    }
  } else {
    sendText(chatId, "–ü–æ–º–∏–ª–∫–∞: –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.");
  }
}

function getQuestionText(questionNumber) {
  return sheetQuestion.getRange(questionNumber + 1, 1).getValue(); // –ö–æ–ª–æ–Ω–∫–∞ 1 –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è
}

function getQuestionOptions(questionNumber) {
  if (questionNumber === 1) {
    return ["üòÉ", "üòå", "üòê", "ü•µ", "‚ò†Ô∏è"];
  } else if (questionNumber >= 2 && questionNumber <= 3) {
    return Array.from({ length: 10 }, function(_, i) { return (10 - i).toString(); });// —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ 10
  } else {
    return [];
  }
}

function sendQuestionWithKeyboard(chatId, questionText, options) {
  var keyboard = {
    keyboard: options.map(function(option) { return [{ text: option }]; }),
    one_time_keyboard: true,
    resize_keyboard: true
  };

  // var message = "Question:\n" + questionText;
  var message = "\n" + questionText;

  var url = telegramUrl + "/sendMessage";
  var payload = {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify({
      chat_id: chatId,
      text: message,
      reply_markup: keyboard
    })
  };

  UrlFetchApp.fetch(url, payload);
}

function sendText(chatId, text) {
  var url = telegramUrl + "/sendMessage";
  var payload = {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify({
      chat_id: chatId,
      text: text
    })
  };

  UrlFetchApp.fetch(url, payload);
}

function getUserRow(chatId) {
  var userColumn = sheetUserQuestions.getRange(1, 1, sheetUserQuestions.getLastRow(), 1).getValues().flat().indexOf(chatId);
  if (userColumn !== -1) {
    return userColumn + 1;
  }
  return -1;
}

//--------------------archive-------------------

function archiveData() {
  var lastRow = sheetAnswers.getLastRow();
  var lastColumn = sheetAnswers.getLastColumn();
  var dataToCopy = sheetAnswers.getRange(2, 1, lastRow - 1, lastColumn).getValues();

  for (var i = 0; i < dataToCopy.length; i++) {
    var dateValue = dataToCopy[i][0]; 
    var dateObject = new Date(dateValue);
    
    dataToCopy[i] = [
      dateObject.getDate(),
      dateObject.getMonth() + 1, 
      dateObject.getFullYear(),
      ...dataToCopy[i] // –ó–∞–ª–∏—à–∞—î–º–æ —ñ–Ω—à—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ –∑–º—ñ–Ω
    ];
  }

  sheetArchive.getRange(sheetArchive.getLastRow() + 1, 1, dataToCopy.length, dataToCopy[0].length).setValues(dataToCopy);
  // –¥–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –¥–æ –±–∞–∑–∏
  var dataToAppend = dataToCopy.map(function(row) {
    return [row[0], row[1], row[2], row[3], row[4], row[6], row[7]];
  });
  var sheetbaseArr = sheetbase.getRange("A2:A").getValues();
  var sheetbaselRow = sheetbaseArr.filter(String).length
  sheetbase.getRange(sheetbaselRow + 1, 1, dataToAppend.length, dataToAppend[0].length).setValues(dataToAppend);

  var userQuestionsData = sheetUserQuestions.getRange("A2:B").getValues();

  var lr = userQuestionsData.filter(function(row) {
    return row[0] !== "";
  }).length;

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —É—Å—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤ —Å—Ç–æ–≤–ø—Ü—ñ B –∑–Ω–∞—á–µ–Ω–Ω—è -1
  for (var i = 0; i < lr; i++) {
    sheetUserQuestions.getRange(i + 2, 2).setValue(-1);
  }

  sheetAnswers.getRange(2, 1, lastRow - 1, lastColumn).clearContent();
}

//--------------------reminder-------------------

function reminder() {
  var users = sheetUserQuestions.getRange("A2:A").getValues();

  var hi = sheetHr.getRange("D2").getValue()
  var today = new Date();
  var formattedDate = today.toISOString().split('T')[0];
  var statArc = [[formattedDate, hi]]
  var lRow = users.filter(String).length
  Logger.log("hi "+ hi)
  for (var i = 0; i < lRow; i++) {
    try {
      Logger.log("Sending message to user " + users[i][0]);
      sendText(users[i][0], hi);
      Utilities.sleep(1000);
    } catch (error) {
      Logger.log("Error sending message to user " + users[i][0] + ": " + error);
    }
  }

  sheetHr.getRange(sheetHr.getLastRow() + 1, 1, 1, statArc[0].length).setValues(statArc);
}
